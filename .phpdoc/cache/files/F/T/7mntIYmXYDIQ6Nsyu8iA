1699565007
waR3U4bTeM%3A95deffc861035dd317bda3606a66b63f-a0ec8b3b39df94e590dae259de7a5925
s:10080:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"a0ec8b3b39df94e590dae259de7a5925";s:39:" phpDocumentor\Reflection\Php\File name";s:13:"app.blade.php";s:39:" phpDocumentor\Reflection\Php\File path";s:37:"resources/views/layouts/app.blade.php";s:41:" phpDocumentor\Reflection\Php\File source";s:6641:"<!doctype html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">

<head>
    <meta charset="utf-8">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- CSRF Token -->
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <link rel="icon" href="{{ asset('images\logo.jpg') }}">

    <title>{{ config('app.name', 'Agency-Task') }}</title>

    <!-- Scripts -->
    <script src="{{ asset('js/bootstrap.bundle.js') }}" defer></script>
    <script src="{{ asset('js/jquery-3.6.0.min.js') }}"></script>
    <script src="{{ asset('js/bootstrap.bundle.js.map') }}" defer></script>

    <!-- Fonts -->
    <link rel="dns-prefetch" href="//fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css?family=Nunito" rel="stylesheet">

    <!-- Styles -->
    <link href="{{ asset('css/all.css') }}" rel="stylesheet">
    <link href="{{ asset('css/bootstrap.css') }}" rel="stylesheet">
    <link href="{{ asset('css/bootstrap.css.map') }}" rel="stylesheet">
    <link href="{{ asset('css/style.css') }}" rel="stylesheet">
</head>

<body dir="{{ App::isLocale('ar') ? 'rtl' : 'ltr' }}" style="overflow-x: hidden">
    <div class="d-flex">
        <div class="min-vh-100 col-12">
            <div id="app">
                <nav class="navbar navbar-expand-md navbar-light shadow-sm">
                    <div class="container">
                        <a class="navbar-brand" href="{{ url('/') }}">
                            <img src="{{ asset('images\logo.jpg') }}" class="col-6">
                        </a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse"
                            data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
                            aria-expanded="false" aria-label="{{ __('Toggle navigation') }}">
                            <span class="navbar-toggler-icon"></span>
                        </button>

                        <div class="collapse navbar-collapse" id="navbarSupportedContent">
                            <!-- Left Side Of Navbar -->
                            <ul class="navbar-nav col-0 col-md-4">

                            </ul>

                            <!-- Right Side Of Navbar -->
                            <ul
                                class="navbar-nav p-0 col-12 col-md-8 text-center d-flex flex-row justify-content-around justify-content-md-center align-items-start">

                                <!-- Authentication Links -->
                                @if (Auth::user() !== null)
                                    <div>
                                        <li class="nav-item dropdown">

                                            <a id="navbarDropdown" class="nav-link dropdown-toggle" href="#"
                                                role="menu" data-toggle="dropdown" aria-haspopup="true"
                                                aria-expanded="false" v-pre>
                                                Options
                                            </a>

                                            <div class="dropdown-menu dropdown-menu-right text-center"
                                                aria-labelledby="navbarDropdown">
                                                @if(Auth::user()->user_type == 'is_admin')
                                                    <div class="text-center">
                                                        <a class="text-decoration-none nav-link"
                                                            href="{{ route('allProjects') }}">
                                                            All Projects
                                                        </a>
                                                    </div>
                                                    <div class="text-center">
                                                        <a class="text-decoration-none nav-link"
                                                            href="{{ route('allTasks') }}">
                                                            All Tasks
                                                        </a>
                                                    </div>
                                                @endif
                                                <div class="text-center">
                                                    <a class="text-decoration-none nav-link"
                                                        href="{{ route('myTasks') }}">
                                                        My Tasks
                                                    </a>
                                                </div>
                                            </div>
                                        </li>
                                    </div>
                                    <div>
                                        <li class="nav-item dropdown">
                                            <a class="text-decoration-none nav-link" v-pre
                                                href="{{ route('logout') }}">
                                                Logout
                                            </a>
                                        </li>
                                    </div>
                                @else
                                    <div>
                                        <li class="nav-item dropdown">
                                            <a class="text-decoration-none nav-link" v-pre
                                                href="{{ url('register') }}">
                                                Register
                                            </a>
                                        </li>
                                    </div>
                                @endif
                            </ul>
                        </div>
                    </div>
                </nav>
            </div>
            <main class="my-4 min-vh-100">
                @yield('content')
            </main>
            <div class="bg-primary position-absolute bottom-0 col-12 footer">
                <div class="container">
                    <h6 class="text-center py-4 m-0">&copy; All Rights Reserved</h6>
                </div>
            </div>
        </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    @yield('script')

</body>

</html>
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";